// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol NativeTextApi {
  func setText(text: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class NativeTextApiSetup {
  /// The codec used by NativeTextApi.
  /// Sets up an instance of `NativeTextApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: NativeTextApi?) {
    let setTextChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_multi_instance_demo.NativeTextApi.setText", binaryMessenger: binaryMessenger)
    if let api = api {
      setTextChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let textArg = args[0] as! String
        do {
          try api.setText(text: textArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      setTextChannel.setMessageHandler(nil)
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class FlutterTextApiHandler {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func textChanged(text textArg: String, completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.pigeon_multi_instance_demo.FlutterTextApiHandler.textChanged", binaryMessenger: binaryMessenger)
    channel.sendMessage([textArg] as [Any?]) { _ in
      completion()
    }
  }
}
